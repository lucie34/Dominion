package test;

import dominion.*;
import dominion.card.*;
import dominion.card.base.*;
import dominion.card.common.*;
import java.util.*;
import java.io.ByteArrayInputStream;

public class TestCards extends Test {
	
	public void executeTests() {
		GameProxy g = new GameProxy(defaultGame());
		PlayerProxy p0 = new PlayerProxy(g.getPlayer(0));
		PlayerProxy p1 = new PlayerProxy(g.getPlayer(1));
		PlayerProxy p2 = new PlayerProxy(g.getPlayer(2));
		
		// Test de Cellar
		
		p1.clear();
		p1.addToHand(Cellar.class, 2);
		p1.addToHand(Estate.class, 3);
		p1.addToDraw(Copper.class, 2);
		@start "Cellar" {
			g.setInput("Estate\nEstate\n\n");
			p1.playCard("Cellar");
			@check p1.getActions() == 1;
			@check hasCards(p1.hand, "Cellar, Copper, Copper, Estate");
			@check hasCards(p1.discard, "Estate, Estate");
		} @end;
		
		// Test de Chapel
		
		p1.clear();
		p1.addToHand(Chapel.class, 2);
		p1.addToHand(Estate.class, 1);
		p1.addToHand(Copper.class, 2);
		@start "Chapel" {
			g.setInput("Estate\nCopper\n\n");
			p1.playCard("Chapel");
			@check hasCards(p1.hand, "Chapel, Copper");
			@check p1.discard.isEmpty();
		} @end;
		
		// Test de Moat (Action)
		
		p1.clear();
		p1.addToHand(Moat.class, 1);
		p1.addToDraw(Copper.class, 3);
		@start "Moat (Action)" {
			p1.playCard("Moat");
			@check hasCards(p1.hand, "Copper, Copper");
			@check hasCards(p1.draw, "Copper");
		} @end;
		
		// Test de Chancellor
		
		p1.clear();
		p1.addToHand(Chancellor.class, 2);
		p1.addToDraw(Estate.class, 3);
		@start "Chancellor" {
			g.setInput("n\ny\n");
			p1.playCard("Chancellor");
			@check p1.getMoney() == 2;
			@check hasCards(p1.draw, "Estate, Estate");
			@check p1.discard.size() == 0;
			p1.playCard("Chancellor");
			@check p1.getMoney() == 4;
			@check hasCards(p1.discard, "Estate, Estate");
			@check p1.draw.size() == 0;
		} @end;
		
		// Test de Village
		
		p1.clear();
		p1.addToHand(Village.class, 2);
		p1.addToHand(Copper.class, 1);
		p1.addToDraw(Estate.class, 1);
		
		int actions = p1.getActions();

		@start "Village" {
			p1.playCard("Village");
			@check p1.getActions() == actions + 2;
			@check hasCards(p1.hand, "Copper, Estate, Village");
		} @end;
		
		// Test de Woodcutter
		
		p1.clear();
		p1.addToHand(Woodcutter.class, 1);
		
		@start "Woodcutter" {
			p1.playCard("Woodcutter");
			@check p1.getBuys() == 1;
			@check p1.getMoney() == 2;
		} @end;
		
		// Test de Workshop
		
		p1.clear();
		p1.addToHand(Workshop.class, 1);
		@start "Workshop" {
			g.setInput("Witch\nSilver\n");
			p1.playCard("Workshop");
			@check hasCards(p1.discard, "Silver");
		} @end;
		
		// Test de Bureaucrat
		
		p0.clear();
		p0.addToHand(Estate.class, 1);
		p0.addToHand(Duchy.class, 1);
		p1.clear();
		p1.addToHand(Bureaucrat.class, 1);
		p2.clear();
		p2.addToHand(Village.class, 2);
		p2.addToHand(Copper.class, 2);
		
		@start "Bureaucrat" {
			g.setInput("Province\nDuchy\n\n");
			p1.playCard("Bureaucrat");
			@check hasCards(p0.hand, "Estate");
			@check hasCards(p0.draw, "Duchy");
			@check p1.discard.isEmpty();
			@check hasCards(p1.draw, "Silver");
			@check p2.draw.isEmpty();
		} @end;
		
		// Test de Gardens
		
		p1.clear();
		p1.addToHand(Gardens.class, 1);

		@start "Gardens" {
			// 1 carte
			@check p1.hand.get(0).victoryValue(p1.player) == 0;
			p1.addToDiscard(Village.class, 5);
			p1.addToHand(Gardens.class, 3);
			// 9 cartes
			@check p1.hand.get(0).victoryValue(p1.player) == 0;
			p1.draw.add(new Copper());
			// 10 cartes
			@check p1.hand.get(0).victoryValue(p1.player) == 1;
			p1.addToDraw(Copper.class, 30);
			// 40 cartes
			@check p1.hand.get(0).victoryValue(p1.player) == 4;
		} @end;
		
		// Test de Feast
		
		p1.clear();
		p1.addToHand(Feast.class, 1);
		@start "Feast" {
			g.setInput("Gold\nFestival\n");
			p1.playCard("Feast");
			@check p1.draw.isEmpty();
			@check p1.hand.isEmpty();
			@check hasCards(p1.discard, "Festival");
		} @end;
		
		// Test de Moneylender
		
		p1.clear();
		p1.addToHand(Moneylender.class, 2);
		p1.addToHand(Silver.class, 2);
		p1.addToHand(Copper.class, 1);
		@start "Moneylender" {
			// avec Copper
			p1.playCard("Moneylender");
			@check p1.getMoney() == 3;
			// sans Copper
			p1.playCard("Moneylender");
			@check p1.getMoney() == 3;
			@check p1.discard.size() == 0;
			@check hasCards(p1.hand, "Silver, Silver");
		} @end;
		
		// Test de Smithy
		
		p1.clear();
		p1.addToHand(Smithy.class, 3);
		p1.addToHand(Copper.class, 2);
		p1.addToDraw(Estate.class, 3);
		p1.addToDiscard(Village.class, 4);
		@start "Smithy" {
			p1.playCard("Smithy");
			@check p1.hand.size() == 7;
			@check p1.draw.size() == 0;
			@check p1.discard.size() == 4;
			p1.playCard("Smithy");
			@check p1.hand.size() == 9;
			@check p1.draw.size() == 1;
			@check p1.discard.size() == 0;
			p1.playCard("Smithy");
			@check p1.hand.size() == 9;
			@check p1.draw.size() == 0;
			@check p1.discard.size() == 0;
		} @end;
		
		// Test de Council Room
		
		p0.clear();
		p0.addToDraw(Copper.class, 3);
		p1.clear();
		p1.addToHand(CouncilRoom.class, 1);
		p1.addToDraw(CouncilRoom.class, 2);
		p1.addToDraw(Estate.class, 4);
		p2.clear();
		p2.addToDiscard(Estate.class, 1);
		@start "Council Room" {
			p1.playCard("Council Room");
			@check p0.hand.size() == 1;
			@check p1.hand.size() == 4;
			@check p2.hand.size() == 1;
			p1.playCard("Council Room");
			@check p0.hand.size() == 2;
			@check p1.hand.size() == 5;
			@check p2.hand.size() == 1;
			p1.playCard("Council Room");
			@check p0.hand.size() == 3;
			@check p1.hand.size() == 4;
			@check p2.hand.size() == 1;
		} @end;
		
		// Test de Witch
		
		p0.clear();
		p1.clear();
		p1.addToHand(Witch.class, 2);
		p1.addToDiscard(Copper.class, 3);
		p2.clear();
		
		@start "Witch" {
			p1.playCard("Witch");
			@check p1.hand.size() == 3;
			@check p1.draw.size() == 1;
			@check hasCards(p0.discard, "Curse");
			@check hasCards(p2.discard, "Curse");
			p1.playCard("Witch");
			@check p1.hand.size() == 3;
			@check p1.draw.size() == 0;
			@check hasCards(p0.discard, "Curse, Curse");
			@check hasCards(p2.discard, "Curse, Curse");
		} @end;
	}
}