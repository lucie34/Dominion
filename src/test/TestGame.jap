package test;

import dominion.*;
import dominion.card.*;
import dominion.card.base.*;
import java.util.*;

public class TestGame extends Test {
	
	public void executeTests() {
		Game g = defaultGame();
		Player p = g.getPlayer(1);
		GameProxy g_p = new GameProxy(g);
		PlayerProxy p_p = new PlayerProxy(p);
		
		@start "Nombre de joueurs" {
			@check g.numberOfPlayers() == 3;
		} @end;
		
		@start "Accès aux joueurs" {
			@check p.getName().equals("Titi");
		} @end;

		@start "Autres joueurs (taille)" {
			@check g.otherPlayers(p).size() == 2;
		} @end;

		@start "Autres joueurs (noms)" {
			@check g.otherPlayers(p).get(0).getName().equals("Tutu");
			@check g.otherPlayers(p).get(1).getName().equals("Toto");
		} @end;
		
		CardList availableSupplies = g.availableSupplyCards();
		
		@start "Nombre de piles de réserve" {
			@check availableSupplies.size() == 17;
		} @end;
		
		@start "Trouver une carte présente dans la réserve" {
			@check g.getFromSupply("Festival").getName().equals("Festival");
		} @end;

		@start "Trouver une carte absente de la réserve" {
			@check g.getFromSupply("Blop") == null;
		} @end;

		@start "Retirer une carte de la réserve" {
			@check g.removeFromSupply("Festival").getName().equals("Festival");
			boolean found = false;
			for (CardList supp: g_p.supplyStacks) {
				if (!supp.isEmpty() &&
					supp.get(0).getName().equals("Festival")) {
					@check supp.size() == 9;
					found = true;
				}
			}
			@check found;
		} @end;

		@start "Retirer une carte absente de la réserve" {
			@check g.removeFromSupply("Blop") == null;
		} @end;
		
		@start "Pile vide" {
			for (int i=0; i<9; i++) {
				g.removeFromSupply("Festival");
			}
			@check g.availableSupplyCards().size() == 16;
		} @end;

		for (int i=0; i<10; i++) {
			g.removeFromSupply("Village");
		}

		@start "Partie non terminée" {
			@check !g.isFinished();
		} @end;

		availableSupplies = g.availableSupplyCards();
		@start "Piles de réserve disponibles" {
			boolean found;
			found = false;
			for (Card c: availableSupplies) {
				if (c.getName().equals("Village")) {
					found = true;
				}
			}
			@check !found;
			found = false;
			for (Card c: availableSupplies) {
				if (c.getName().equals("Smithy")) {
					found = true;
				}
			}
			@check found;
		} @end;

		for (int i=0; i<10; i++) {
			g.removeFromSupply("Smithy");
		}

		@start "Partie terminée" {
			@check g.isFinished();
		} @end;
	}
}